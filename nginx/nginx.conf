# nginx 프로세스를 실행할 사용자 설정
user nginx;

# 워커 프로세스 갯수 설정 (auto는 CPU 코어 수에 맞춰 자동 설정)
worker_processes auto;

# 에러 로그 위치와 레벨 설정
error_log /var/log/nginx/error.log warn;

# nginx 마스터 프로세스 ID 저장 위치
pid       /var/run/nginx.pid;

# 이벤트 블록 - 연결 처리 방법 설정
events {
    # 워커 프로세스 당 동시 처리 가능한 최대 연결 수
    worker_connections 1024;
}

# HTTP 서버 설정
http {
    # mime.types 파일 포함 (파일 확장자와 Content-Type 매핑)
    include /etc/nginx/mime.types;
    # 기본 MIME 타입 설정
    default_type aaplication/octet-stream;

    # 로그 포맷 정의
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

    # main 포맷을 사용하여 접근 로그 설정
    access_log /var/log/nginx/access.log main;
    
    # 파일 전송 시 sendfile() 사용 (성능 향상)
    sendfile on;
    # 연결 유지 시간 설정 (초 단위)
    keepalive_timeout 65;

    # 가상 호스트 설정
    server {
        # 80번 포트로 들어오는 모든 요청 처리
        listen 80;
        # 서버 이름 설정
        server_name localhost;

        # /static/ 경로로 들어오는 요청 처리
        location /static/ {
            # Go 애플리케이션의 주소 (Docker 컨테이너 이름:포트)
            proxy_pass http://app:8080;
            # 프록시 헤더 설정
            # 원본 호스트 정보 전달
            proxy_set_header Host $host;
            # 실제 클라이언트 IP 전달
            proxy_set_header X-Real-IP $remote_addr;
        }

        # 그 외 모든 요청은 Go 애플리케이션으로 전달
        location / {
            # Go 애플리케이션의 주소 (Docker 컨테이너 이름:포트)
            proxy_pass http://app:8080;

            # 프록시 헤더 설정
            # 원본 호스트 정보 전달
            proxy_set_header Host $host;
            # 실제 클라이언트 IP 전달
            proxy_set_header X-Real-IP $remote_addr;
            # 프록시 서버를 거치며 추가된 모든 IP 정보
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            # 원본 프로토콜(http/https) 정보 전달
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }
}